library(shiny)
library(dplyr)
library(caret)
library(data.table)

# UI for Data Cleaning Module
data_transformation_ui <- function(id) {
  ns <- NS(id)
  
  tagList(
    h3("Data Cleaning and Preprocessing Cont."),
    
    # Scaling (With Options)
    radioButtons(ns("scaling_method"), "Choose Scaling Method:",
                 choices = c("None", "Min-Max Scaling", "Z-score Normalization"),
                 selected = "None"),
    
    # Categorical Encoding
    checkboxInput(ns("encode_categorical"), "Encode Categorical Features (One-Hot Encoding)", FALSE),
    
    # Outlier Handling
    checkboxInput(ns("handle_outliers"), "Handle Outliers (Using IQR)", FALSE),
    conditionalPanel(
      condition = "input.handle_outliers == true",
      ns = ns,
      radioButtons(ns("outlier_method"), "Choose Outlier Handling Method:",
                   choices = c("Cap Outliers", "Remove Outliers"),
                   selected = "Cap Outliers")
    ),
    
    # Apply Cleaning
    actionButton(ns("apply_cleaning"), "Clean and Preprocess Data"),
    
    # Show cleaned data
    h4("Cleaned Data Preview"),
    DT::dataTableOutput(ns("cleaned_data_preview"))
  )
}

# Server Logic for Data Cleaning Module
data_transformation_server <- function(id, cleaned_data) {
  moduleServer(id, function(input, output, session) {
    cleaned_data_final <- reactiveVal()
    
    observeEvent(input$apply_cleaning, {
      req(cleaned_data())
      data <- cleaned_data()
      
      # Scale Numerical Data
      if (input$scaling_method != "None") {
        num_cols <- sapply(data, is.numeric)
        if (input$scaling_method == "Min-Max Scaling") {
          data[num_cols] <- lapply(data[num_cols], function(x) (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)))
        } else if (input$scaling_method == "Z-score Normalization") {
          data[num_cols] <- lapply(data[num_cols], function(x) (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE))
        }
      }
      
      # Encode Categorical Features
      if (input$encode_categorical) {
        cat_cols <- sapply(data, is.character) | sapply(data, is.factor)
        if (any(cat_cols)) {
          data <- as.data.frame(model.matrix(~ . - 1, data = data))
        }
      }
      
      # Handle Outliers (With IQR)
      if (input$handle_outliers) {
        num_cols <- sapply(data, is.numeric)
        if (any(num_cols)) {
          for (col in names(data)[num_cols]) {
            Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
            Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
            IQR <- Q3 - Q1
            lower_bound <- Q1 - 1.5 * IQR
            upper_bound <- Q3 + 1.5 * IQR
            
            if (input$outlier_method == "Cap Outliers") {
              data[[col]][data[[col]] < lower_bound] <- lower_bound
              data[[col]][data[[col]] > upper_bound] <- upper_bound
            } else if (input$outlier_method == "Remove Outliers") {
              data <- data[data[[col]] >= lower_bound & data[[col]] <= upper_bound, ]
            }
          }
        }
      }
      
      cleaned_data_final(data)
    })
    
    # Show Cleaned Data
    output$cleaned_data_preview <- DT::renderDataTable({
      req(cleaned_data_final())
      DT::datatable(cleaned_data_final())
    })
    
    # Return the cleaned dataset
    return(cleaned_data_final)
  })
}

